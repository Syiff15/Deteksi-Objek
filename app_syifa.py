# -*- coding: utf-8 -*-
"""App_Syifa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p07ybQjHsOFWoqgMK6v6g_PTvjUWnIQp
"""

#pip install streamlit
#pip install ultralytics

# === Import Library ===
import streamlit as st
import time
from PIL import Image
from ultralytics import YOLO
import tensorflow as tf
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import cv2

# === LOAD MODELS ===
@st.cache_resource
def load_models():
    yolo_model = YOLO("Model/best.pt")  # Model deteksi Gambar
    classifier = tf.keras.models.load_model("Model/Syifa Salsabila_Laporan 2.h5")  # Model klasifikasi
    return yolo_model, classifier

yolo_model, classifier = load_models()

# === KONFIGURASI DASAR HALAMAN WEB ===
st.set_page_config(page_title="Ursidetect", page_icon="üêªüêº", layout="centered")

# === STATE MANAGEMENT ===
if "step" not in st.session_state:
    st.session_state.step = 1
if "name" not in st.session_state:
    st.session_state.name = ""

# === NAVIGATION BAR (Progress Bar Sederhana) ===
def progress_bar(step):
    steps = ["Welcome to Ursidetect", "About Ursidetect", "Enter Your Name", "Let's Start"]
    cols = st.columns(len(steps))
    for i, label in enumerate(steps):
        with cols[i]:
            if i + 1 == step:
                st.markdown(f"**<span style='color:#2563eb;'>{i+1}. {label}</span>**", unsafe_allow_html=True)
            else:
                st.markdown(f"<span style='color:gray;'>{i+1}. {label}</span>", unsafe_allow_html=True)

# === STEP 1 ===
if st.session_state.step == 1:
    st.image("slide 1.jpg", use_container_width=True)

    # === Judul & Intro ===
st.markdown(
    """
    <h1 style='text-align:center; color:#1E1E1E;'>
        Selamat datang di 
        <span style="color:#2563EB;">Ursidetect</span>
        <span style="vertical-align:middle; position:relative; top:-2px;">üêª‚Äç‚ùÑÔ∏èüêº</span>
    </h1>
    <p style='text-align:center; font-size:18px; color:#4B5563;'>
        Sebelum kita mulai berpetualang, kenalan dulu yuk dengan <b>Ursidetect</b>!<br>
        Platform ini berbasis <b>kecerdasan buatan (AI)</b> yang dirancang untuk 
        <b>mendeteksi</b> dan <b>mengklasifikasikan</b> hewan <b>panda</b> serta <b>beruang</b>.
    </p>
    """,
    unsafe_allow_html=True
)      
    st.markdown("<br>", unsafe_allow_html=True)

    # === Dua Fitur dalam Kotak ===
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        <div style="
            background-color:#E6F0FF;
            padding:25px;
            border-radius:20px;
            box-shadow:0 4px 15px rgba(0,0,0,0.07);
            text-align:center;
            transition: transform 0.2s ease;">
            <h3>üîé Deteksi Gambar</h3>
            <p style="color:#374151; font-size:16px;">
            Ursidetect dapat menemukan dan menandai posisi panda atau beruang di dalam gambar 
            menggunakan kotak pembatas (<i>bounding box</i>).
            </p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div style="
            background-color:#FFF8E6;
            padding:25px;
            border-radius:20px;
            box-shadow:0 4px 15px rgba(0,0,0,0.07);
            text-align:center;
            transition: transform 0.2s ease;">
            <h3>üêº Klasifikasi Gambar</h3>
            <p style="color:#374151; font-size:16px;">
            Ursidetect dapat menentukan apakah gambar tersebut termasuk panda 
            atau beruang, lengkap dengan tingkat kepercayaan (<i>confidence score</i>).
            </p>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("<br><hr>", unsafe_allow_html=True)

    # === Tombol Lanjut ===
    st.markdown(
        "<p style='text-align:center; color:#4B5563; font-size:17px;'>Yuk lanjut ke langkah berikutnya untuk mulai berpetualang!</p>",
        unsafe_allow_html=True
    )

    st.markdown("<div style='text-align:center;'>", unsafe_allow_html=True)
    if st.button("üöÄ Lanjutkan Petualangan üêæ", use_container_width=False):
        st.session_state.step = 2
        st.rerun()
    st.markdown("</div>", unsafe_allow_html=True)

# === STEP 2 ===
elif st.session_state.step == 2:
    st.image("slide 3-1.png", width=300)
    st.write("Sekarang giliran kamu! Masukkan namamu supaya Ursidetect tahu siapa partner barunya.")

    name_input = st.text_input("", placeholder="Contoh: Ursi")
    col_kiri, col_kanan = st.columns([4, 1])
    with col_kanan:
        if st.button("Lanjutkan üêæ"):
            if name_input.strip() != "":
                st.session_state.name = name_input.strip()
                st.session_state.step = 3
                st.rerun()
            else:
                st.info("Ups, sepertinya kamu lupa menulis namamu dulu nih üòä")

# === STEP 3 ===
elif st.session_state.step == 3:
    st.title(f"Hai, {st.session_state.name.lower().split()[0]}! üëã")
    st.info("Selamat datang di markas petualangan Ursidetect!")
    st.info("Pilih mode favoritmu: mau jadi pemburu hewan (deteksi) atau peneliti hewan (klasifikasi)?")

    analysis_type = st.radio(
        "Pilih Mode Petualang:",
        ["Pemburu Hewan (Deteksi)", "Peneliti Hewan (Klasifikasi)"],
        horizontal=True,
        index=0)
    st.divider()

    st.markdown("#### Masukkan Gambar")
    st.caption(f"Untuk mulai petualangannya, {st.session_state.name.lower().split()[0]} harus memasukkan gambar berbentuk jpg, jpeg atau png yaa.")
    uploaded_file = st.file_uploader("Pilih gambar (jpg, jpeg, png):", type=["jpg", "jpeg", "png"])
    
    if uploaded_file:
        image = Image.open(uploaded_file)
        st.image(image, caption=uploaded_file.name, use_container_width=True)
    
    st.divider()
    analyze_button = st.button("üîé Mulai Petualangan", use_container_width=True)

    if analyze_button:
        st.markdown("### Hasil Petualangan")
        if not uploaded_file:
            st.warning("‚ö†Ô∏è Silakan masukkan gambar terlebih dahulu sebelum berpetualang.")
        else:
            with st.spinner("‚è≥ Sedang Berpetualang..."):
                time.sleep(2)
            st.success("‚¨áÔ∏è Hasil analisis muncul di sini!")

            # === Mulai: kode hasil deteksi/klasifikasi ===
            pil_img = Image.open(uploaded_file).convert("RGB")
            # Jalankan deteksi YOLO
            results = yolo_model(pil_img)

            # Ambil hasil dari frame pertama
            res = results[0]

            # Ekstraksi box / confidence / kelas dari hasil YOLO (kompatibilitas CPU/GPU)
            try:
                boxes = res.boxes.xyxy.cpu().numpy()
                scores = res.boxes.conf.cpu().numpy()
                det_classes = res.boxes.cls.cpu().numpy().astype(int)
            except Exception:
                boxes = res.boxes.xyxy.numpy()
                scores = res.boxes.conf.numpy()
                det_classes = res.boxes.cls.numpy().astype(int)

            # Salin image ke format OpenCV untuk menggambar
            cv_img = np.array(pil_img)[:, :, ::-1].copy()  # RGB -> BGR untuk cv2
            annotated = cv_img.copy()

            # Ambil nama kelas dari model deteksi jika tersedia
            try:
                det_names = yolo_model.names
            except Exception:
                det_names = {}

            # Siapkan nama kelas untuk model klasifikasi (ubah jika modelmu punya label berbeda)
            classifier_names = ["Panda", "Beruang"]

            # Cek ukuran input classifier
            try:
                in_shape = classifier.input_shape
                in_h = in_shape[1] or 224
                in_w = in_shape[2] or 224
            except Exception:
                in_h, in_w = 224, 224

            detections_summary = []
            for i, box in enumerate(boxes):
                x1, y1, x2, y2 = map(int, box)
                det_conf = float(scores[i]) if i < len(scores) else 0.0
                det_cls_idx = int(det_classes[i]) if i < len(det_classes) else -1
                det_label = det_names.get(det_cls_idx, str(det_cls_idx))

                # Gambar bounding box dan label deteksi
                color = (0, 255, 0)
                cv2.rectangle(annotated, (x1, y1), (x2, y2), color, 2)
                text = f"{det_label} {det_conf:.2f}"
                cv2.putText(annotated, text, (x1, max(y1 - 10, 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

                # Crop untuk klasifikasi
                try:
                    crop_pil = pil_img.crop((x1, y1, x2, y2)).convert("RGB")
                    crop_resized = crop_pil.resize((in_w, in_h))
                    x = tf.keras.preprocessing.image.img_to_array(crop_resized)
                    x = x / 255.0
                    x = np.expand_dims(x, 0)
                    preds = classifier.predict(x)
                    cls_idx = int(np.argmax(preds[0]))
                    cls_conf = float(np.max(preds[0]))
                    cls_name = classifier_names[cls_idx] if cls_idx < len(classifier_names) else str(cls_idx)
                except Exception as e:
                    cls_name = "N/A"
                    cls_conf = 0.0

                # Tulis hasil klasifikasi pada gambar
                cls_text = f"{cls_name} {cls_conf:.2f}"
                cv2.putText(annotated, cls_text, (x1, y2 + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 165, 0), 2)

                detections_summary.append({
                    "box": [int(x1), int(y1), int(x2), int(y2)],
                    "detected_label": det_label,
                    "detected_confidence": round(det_conf, 4),
                    "classified_label": cls_name,
                    "classification_confidence": round(cls_conf, 4)
                })

            # Tampilkan hasil terannotasi
            annotated_rgb = cv2.cvtColor(annotated, cv2.COLOR_BGR2RGB)
            annotated_pil = Image.fromarray(annotated_rgb)
            st.image(annotated_pil, caption="Hasil Deteksi & Klasifikasi", use_container_width=True)

            # Tampilkan ringkasan deteksi
            if len(detections_summary) == 0:
                st.info("Tidak ada objek terdeteksi.")
            else:
                st.markdown("### Ringkasan Deteksi")
                for idx, d in enumerate(detections_summary, start=1):
                    st.markdown(
                        f"- **Objek {idx}**: Deteksi = **{d['detected_label']}** ({d['detected_confidence']:.2f}) | "
                        f"Klasifikasi = **{d['classified_label']}** ({d['classification_confidence']:.2f}) | "
                        f"Box = {d['box']}"
                    )
    
    col_kiri, col_kanan = st.columns([4, 1])
    with col_kanan:
        if st.button("Lanjutkan üêæ"):
            st.session_state.step = 4
            st.rerun()

# === STEP 4 ===
elif st.session_state.step == 4:
    st.subheader("üí¨ Cerita Petualanganmu")
    st.info("""
    Petualanganmu bersama Ursidetect sudah selesai üêæ  
    Ceritakan pengalamanmu, ya! Kami ingin tahu bagaimana rasanya menjelajahi dunia panda & beruang bersama AI ini.
    """)
    feedback_text = st.text_area("Bagaimana Petualanganmu?", placeholder="Kirimkan ceritamu di sini...")

    if st.button("Kirim Cerita Petualanganku"):
        if feedback_text.strip() == "":
            st.warning("Cerita Kamu sangat berarti bagi kami üòä")
        else:
            st.success(f"‚úÖ Terima kasih atas ceritanya, {st.session_state.name.lower().split()[0]}!")

    st.markdown("---")
    if st.button("üîÅ Mau memulai lagi?"):
        st.session_state.step = 1
        st.session_state.name = ""
        st.rerun()
